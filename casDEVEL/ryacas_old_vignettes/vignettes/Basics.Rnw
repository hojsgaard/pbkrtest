
\newslide
\section{Simple \yac\ calculations}


\subsection{Simple calculations}

In \yac\ you can make simple calculations. The assign operator
\texttt{:=} provides a handle on objects (observe that \yac\ is
case--sensitive):
@ 
<<>>=
(10 + 2) * 5 + 7^7
1/14+5/21*(30-(1+1/2)*5^2);
@ %def 


\subsection{Setting and clearing a variable}

The function Set() and the operator := can both be used to assign
values to global variables. 
@ 
<<>>=
n := (10 + 2) * 5 
n := n+n
Set(z, Cos(a))
z+z
@ %def 


To clear a variable
binding execute Clear():
@ 
<<>>=
n
Clear(n)
n
@ %def 

Currently there is no difference between assigning variables using
Set() or using the operator :=. The latter can however also assign
lists and define functions.


\subsection{Symbolic and numerical evaluations, precision}

Evaluations are generally exact:
@ 
<<>>=
Exp(0)
Exp(1)
Sin(Pi/4)
355/113
@ %def 

 To obtain a numerical evaluation
(approximation), the N() function can be used:
@ 
<<>>=
N(Exp(1))
N(Sin(Pi/4))
N(355/113)
@ %def 

The N() function has an optional second argument, the required precision:
@ 
<<>>=
In> N(355/133,20)
Out> 0.0042735042;
@ %def 

The command Precision(n)
can be used to specify that all floating point numbers should have a
fixed precision of n digits:
@ 
<<>>=
In> Precision(5);
N(355/113)
@ %def 



\subsection{Rational numbers}

Rational numbers will stay rational as long as the numerator and
denominator are integers:
@ 
<<>>=
55/10
@ %def 


\subsection{Complex numbers and the imaginary unit} 

The imaginary unit $i$ is denoted I and complex numbers can be entered
as either expressions involving I or explicitly Complex(a,b) for a+ib.
@ 
<<>>=
I^2
7+3*I
Conjugate(%)
Exp(3*I)
@ %def 









\subsection{Symbolic calculation}
\label{sec:symbolicCalculation}

Some exact manipulations :
@ 
<<>>=
In> 1/14+5/21*(30-(1+1/2)*5^2);
In> 0+x;
Out> x;
In> x+1*y;
Out> x+y;

In> Sin(ArcSin(alpha))+Tan(ArcTan(beta));
Out> alpha+beta;
@ %def 


%Note that standard function names in Yacas are
%typically capitalized. 

% Multiple capitalization such as ArcSin is
% sometimes used. The underscore character  is a reserved operator
% symbol and cannot be part of variable or function names.


\subsection{Recall the most recent line -- the \texttt{\%} operator}

The operator \texttt{\%} automatically recalls the result from the
previous line. 
@ 
<<>>=
(1+x)^3
%
z:= %
@ %def 

\subsection{Pi ($\pi$)}

There is a built in variable Pi for $\pi$. An approximate numerical
value is obtained with N(Pi). Yacas knows some simplification rules
using Pi (especially with trigonometric functions).
@ 
<<>>=
Pi
N(Pi)
Sin(Pi/4)
@ %def 






\subsection{PrettyForm and TeXForm}

Results can be output on the screen in a more readable form with the
function PrettyForm():
@ 
<<>>=
xxx:= (1+x)^2+k^3
PrettyForm(xxx);
@ %def 
The output can be exported to TeX with TeXForm(), e.g.
@ 
<<>>=
TeXForm(xxx)
@ %def 
