#' Variable utilities: parse, select, check, map, rename
#' 
#' These functions provide flexible tools for parsing and managing variable names
#' from formulas, unquoted names, or character vectors. Demonstrated using `CO2` dataset.
#'
#' @importFrom rlang enquos eval_tidy as_name abort is_formula f_rhs
#' @export
vparse <- function(...) {
  dots <- enquos(...)
  vars <- NULL

  if (length(dots) == 1) {
    val <- eval_tidy(dots[[1]])

    if (is_formula(val)) {
      vars <- all.vars(f_rhs(val))
    } else if (is.character(val)) {
      vars <- val
    } else {
      abort("Invalid input: expected a formula (~), character vector, or unquoted variable names.")
    }
  } else {
    vars <- unname(sapply(dots, as_name))
  }

  vars
}

#' Select columns from a data frame using flexible input
#'
#' @param df A data frame
#' @param ... Variable input (unquoted, character vector, or formula)
#' @return A data frame with selected columns
#' @export
vselect <- function(df, ...) {
  vars <- vparse(...)
  df[, vars, drop = FALSE]
}

#' Check if variables exist in a data frame
#'
#' @param df A data frame
#' @param ... Variables to check
#' @return TRUE if all variables exist, otherwise error
#' @export
vcheck <- function(df, ...) {
  vars <- vparse(...)
  missing <- vars[!vars %in% names(df)]
  if (length(missing) > 0) {
    abort(paste("Missing variables in data frame:", paste(missing, collapse = ", ")))
  }
  TRUE
}

#' Apply a function to each parsed variable name
#'
#' @param ... Variables to parse
#' @param .f Function to apply to each name
#' @return A list of results
#' @export
vmap <- function(..., .f) {
  vars <- vparse(...)
  lapply(vars, .f)
}

#' Rename columns in a data frame
#'
#' @param df A data frame
#' @param rename_map A named character vector (old_name = new_name)
#' @return A data frame with renamed columns
#' @export
vrename <- function(df, rename_map) {
  stopifnot(is.character(rename_map), !is.null(names(rename_map)))
  old_names <- names(rename_map)
  new_names <- unname(rename_map)

  matched <- match(old_names, names(df))
  if (any(is.na(matched))) {
    abort("Some names in rename_map do not exist in the data frame.")
  }

  names(df)[matched] <- new_names
  df
}

# Example usage with CO2 dataset
#' @examples
#' data(CO2)
#' vparse(Treatment, Type)
#' vparse(c("Treatment", "Type"))
#' vparse(~Treatment + Type)
#' vselect(CO2, Treatment, Type)
#' vcheck(CO2, ~Treatment + Type)
#' vmap(~Treatment + Type, toupper)
#' vrename(CO2, c(Treatment = "Trt", Type = "Group"))
